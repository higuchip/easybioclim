import collections
import geopandas as gpd
import geemap.foliumap as geemap # geemap j√° importa ee
import json
import streamlit as st
from streamlit_folium import folium_static
import ee # Importar explicitamente para inicializa√ß√£o
import pandas as pd
import os # Para uploaded_file_to_gdf
import tempfile # Para uploaded_file_to_gdf
import uuid # Para uploaded_file_to_gdf

# Sua linha de compatibilidade (importante para algumas vers√µes de Python/bibliotecas)
collections.Callable = collections.abc.Callable

# Fun√ß√£o para inicializar o Earth Engine
def initialize_ee():
    """
    Inicializa o Google Earth Engine usando credenciais de conta de servi√ßo
    armazenadas nos segredos do Streamlit.
    """
    try:
        # Tenta uma opera√ß√£o simples para verificar se j√° est√° inicializado
        ee.Number(1).getInfo()
        # st.sidebar.info("Earth Engine j√° inicializado.") # Opcional para debug
    except ee.EEException as e:
        # Se n√£o inicializado ou erro de credencial, tenta inicializar
        try:
            # Verifica se o segredo com as credenciais JSON est√° configurado
            if "gee_service_account_credentials" in st.secrets:
                # st.secrets retorna um objeto TomlOrderedDict, pegue o valor string
                google_credentials_json_str = st.secrets["gee_service_account_credentials"]
                
                # Parse o JSON para um dicion√°rio
                try:
                    credentials_dict = json.loads(google_credentials_json_str)
                except json.JSONDecodeError as json_err:
                    st.error(f"Erro ao decodificar o JSON das credenciais: {json_err}")
                    st.error(f"Verifique o formato do segredo 'gee_service_account_credentials'. Ele deve ser o CONTE√öDO do arquivo JSON.")
                    st.stop()
                    return

                # O e-mail da conta de servi√ßo est√° dentro do arquivo JSON da chave
                service_account_email = credentials_dict.get('client_email')
                if not service_account_email:
                    st.error("A chave 'client_email' n√£o foi encontrada nas credenciais JSON.")
                    st.stop()
                    return

                # Inicializa as credenciais.
                # A documenta√ß√£o do ee.ServiceAccountCredentials sugere que key_data pode ser a string JSON.
                credentials = ee.ServiceAccountCredentials(
                    service_account_email, 
                    key_data=google_credentials_json_str # Passa a string JSON diretamente
                )
                
                # Inicializa o Earth Engine com as credenciais e, opcionalmente, o projeto.
                # O endpoint de alto volume pode ser √∫til.
                ee.Initialize(
                    credentials=credentials,
                    opt_url='https://earthengine-highvolume.googleapis.com'
                    # project='seu-gcp-project-id' # Opcional, se o GEE precisar explicitamente
                )
                # st.sidebar.success("Earth Engine Inicializado com Sucesso via Conta de Servi√ßo!") # Opcional para debug
            else:
                # Fallback para desenvolvimento local (se os segredos n√£o estiverem configurados)
                # Isso pode tentar usar credenciais padr√£o locais ou falhar se n√£o configurado.
                st.warning("Credenciais da conta de servi√ßo do GEE n√£o encontradas nos segredos. Tentando inicializa√ß√£o padr√£o (local).")
                ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com')

        except Exception as ex:
            st.error(f"Falha ao inicializar o Earth Engine: {ex}")
            st.error("Verifique se o segredo 'gee_service_account_credentials' est√° configurado corretamente no Streamlit Cloud e se a conta de servi√ßo tem as permiss√µes necess√°rias no GCP.")
            st.stop() # Para a execu√ß√£o do app se o GEE n√£o puder ser inicializado
    # except Exception as general_exception: # Captura outras exce√ß√µes durante a verifica√ß√£o
    #     st.warning(f"N√£o foi poss√≠vel verificar o status do EE, tentando inicializar: {general_exception}")
    #     # Proceder com a tentativa de inicializa√ß√£o como acima.
    #     # Esta l√≥gica pode ser duplicada ou refatorada para evitar repeti√ß√£o.

# Chame a fun√ß√£o de inicializa√ß√£o no in√≠cio do seu script, ANTES de qualquer chamada ao 'ee' ou 'geemap' que use 'ee'.
initialize_ee()

# st.set_page_config(layout="wide") # Mova para o topo se for usar

@st.cache_data # st.cache foi depreciado, use st.cache_data ou st.cache_resource
def uploaded_file_to_gdf(data):
    # import tempfile # J√° importado globalmente
    # import os # J√° importado globalmente
    # import uuid # J√° importado globalmente

    _, file_extension = os.path.splitext(data.name)
    file_id = str(uuid.uuid4())
    file_path = os.path.join(tempfile.gettempdir(), f"{file_id}{file_extension}")

    with open(file_path, "wb") as file:
        file.write(data.getbuffer())

    if file_path.lower().endswith(".kml"):
        gpd.io.file.fiona.drvsupport.supported_drivers["KML"] = "rw"
        gdf = gpd.read_file(file_path, driver="KML")
    else:
        gdf = gpd.read_file(file_path)

    return gdf

# Resto do seu c√≥digo...
col1, col2 = st.columns([2, 3]) # Descomente se for usar

# with col1: # Descomente se for usar
original_title = '<h1 style="color:Blue">‚õÖ Easy Bioclim</h1>'
st.markdown(original_title, unsafe_allow_html=True)
st.caption(
    "Powered by worldclim.org, Google Earth Engine and Python | Developed by Pedro Higuchi ([@pe_hi](https://twitter.com/pe_hi))"
)

# with col2: # Descomente se for usar
st.markdown(
    "<h4 style=' color: black; background-color:lightgreen; padding:25px; border-radius: 25px; box-shadow: 0 0 0.1em black'>Web app para obten√ß√£o de dados bioclim√°ticos de pontos de interesse</h4>",
    unsafe_allow_html=True,
)

bios_symbols = [
    "BIO1", "BIO2", "BIO3", "BIO4", "BIO5", "BIO6", "BIO7", "BIO8", "BIO9", "BIO10",
    "BIO11", "BIO12", "BIO13", "BIO14", "BIO15", "BIO16", "BIO17", "BIO18", "BIO19",
]
bios_names = [
    "Temperatura m√©dia anual", "M√©dia da amplitude da temperatura diurna", "Isotermalidade",
    "Sazonalidade da Temperatura", "Temperatura m√°xima do m√™s mais quente", "Temperatura m√≠nima do m√™s mais frio",
    "Amplitude da temperatura anual", "M√©dia da temperatura no trimestre mais √∫mido",
    "M√©dia da temperatura no trimestre mais seco", "M√©dia da temperatura no trimestre mais quente",
    "M√©dia da temperatura no trimestre mais frio", "Precipita√ß√£o anual", "Precipita√ß√£o no m√™s mais √∫mido",
    "Precipita√ß√£o no m√™s mais seco", "Sazonalidade de precipita√ß√£o", "Precipita√ß√£o no trimestre mais √∫mido",
    "Precipita√ß√£o no trimestre mais seco", "Precipita√ß√£o no trimestre mais quente", "Precipita√ß√£o no trimestre mais frio",
]
units = [
    "¬∞C", "¬∞C", "%", "¬∞C", "¬∞C", "¬∞C", "¬∞C", "¬∞C", "¬∞C", "¬∞C", "¬∞C",
    "mm", "mm", "mm", "%", "mm", "mm", "mm", "mm",
]
scale = [
    "0.1", "0.1", " ", "0.01", "0.1", "0.1", "0.1", "0.1", "0.1", "0.1", "0.1",
    " ", " ", " ", " ", " ", " ", " ", " ",
]

zipped = list(zip(bios_symbols, bios_names, units, scale))
bioclim_df = pd.DataFrame(zipped, columns=["Nome", "Descri√ß√£o", "Unidade", "Escala"])

st.text(" ")
st.text(" ")
st.markdown("""---""")

st.markdown(
    "<h3>1) Selecione e exporte os pontos de interesse üìå </h3>",
    unsafe_allow_html=True,
)

# Certifique-se que ee est√° inicializado antes de chamar geemap.Map se ele for usar ee implicitamente
# A chamada initialize_ee() no in√≠cio j√° cuida disso.
m = geemap.Map(
    center=[-27.86, -50.20],
    zoom=10,
    basemap="HYBRID",
    plugin_Draw=True,
    Draw_export=True,
    locate_control=True,
    plugin_LatLngPopup=False,
)
st.warning(
    "Usar **apenas** a ferramenta 'Draw a marker', para selecionar os pontos de interesse e, em seguida, clicar em 'Export'."
)
folium_static(m, width=700, height=400)

st.markdown("""---""")
st.markdown(
    "<h3>2) Upload do arquivo GeoJSON üì§</h3>",
    unsafe_allow_html=True,
)
data = st.file_uploader(
    "Fazer o upload do arquivo GeoJSON exportado no passo acima para utilizar como √°reas de interesse üëáüëá",
    type=["geojson"],
)

st.markdown("""---""")
st.markdown(
    "<h3>3) Indicar a identifica√ß√£o das √°reas #Ô∏è‚É£ </h3>",
    unsafe_allow_html=True,
)

input_areas = st.text_area(
    "Seguir a ordem indicada no mapa e separar por v√≠rgula. Usar tecla 'tab' para confirmar",
    height=50,
)
areas_list = []
if input_areas: # Evitar erro se input_areas for vazio
    areas_list = [area.strip() for area in input_areas.split(",") if area.strip()]


# Mova a l√≥gica que depende de 'data' e 'input_areas' para dentro de um if
if data and areas_list: # Garante que ambos os inputs est√£o presentes
    gdf = uploaded_file_to_gdf(data)
    
    # Valida√ß√£o: Verifique se o n√∫mero de geometrias corresponde ao n√∫mero de nomes de √°reas
    if len(gdf) != len(areas_list):
        st.error(f"O n√∫mero de √°reas identificadas ({len(areas_list)}) n√£o corresponde ao n√∫mero de geometrias no arquivo GeoJSON ({len(gdf)}). Por favor, verifique.")
    else:
        pontos = {"latitude": gdf.geometry.y, "longitude": gdf.geometry.x}
        pontos_df = pd.DataFrame(pontos) # Renomeado para evitar conflito com a vari√°vel 'pontos' do GDF

        gdf_json_str = gdf.to_json() # Corre√ß√£o: gdf √© um GeoDataFrame, n√£o precisa ser convertido para json e depois para dict
        # gdf_features = json.loads(gdf_json_str)["features"] # Esta linha √© para quando se tem o JSON string
        
        # Para converter GeoDataFrame para ee.FeatureCollection diretamente com geemap:
        try:
            roi = geemap.geopandas_to_ee(gdf) 
        except Exception as e_feature_collection:
            st.error(f"Erro ao converter GeoDataFrame para ee.FeatureCollection: {e_feature_collection}")
            st.stop()

        dataset = ee.Image("WORLDCLIM/V1/BIO")
        
        try:
            # geemap.extract_values_to_points retorna uma lista de valores, que precisa ser processada.
            # Se voc√™ quer um DataFrame direto, geemap.ee_to_pandas(image.sampleRegions(collection=roi, scale=scale_resolution)) √© mais comum.
            # Vamos usar o extract_values_to_points e convert√™-lo.
            # Primeiro, defina a escala (resolu√ß√£o) para a extra√ß√£o. A imagem WorldClim tem uma escala nativa.
            # A escala nativa do WorldClim V1 BIO √© de 30 arc-seconds (aprox. 1km).
            # Voc√™ pode obter a proje√ß√£o e a escala da imagem:
            scale_resolution = dataset.projection().nominalScale().getInfo()

            df_ee_values = geemap.extract_values_to_points(roi, dataset, scale=scale_resolution) 
            # df_ee_values √© uma lista de dicion√°rios (ou uma ee.FeatureCollection dependendo da vers√£o do geemap)
            # Se for uma ee.FeatureCollection, converta para pandas
            if isinstance(df_ee_values, ee.featurecollection.FeatureCollection):
                 df_extracted = geemap.ee_to_pandas(df_ee_values)
            elif isinstance(df_ee_values, list): # geemap pode retornar lista de listas/valores
                 # A estrutura de df_ee_values pode variar. Precisa inspecionar.
                 # Supondo que seja uma lista de valores para cada banda por ponto:
                 # E que as colunas sejam as bandas da imagem "WORLDCLIM/V1/BIO"
                 band_names = dataset.bandNames().getInfo()
                 if df_ee_values and isinstance(df_ee_values[0], list):
                    df_extracted = pd.DataFrame(df_ee_values, columns=band_names)
                 else: # Tentar uma convers√£o gen√©rica se a estrutura for diferente
                    df_extracted = pd.DataFrame(df_ee_values) # Pode precisar de mais ajustes
            else:
                st.error("Formato inesperado de 'extract_values_to_points'. Verifique a sa√≠da.")
                st.stop()

        except Exception as e_extract:
            st.error(f"Erro durante a extra√ß√£o de valores do Earth Engine: {e_extract}")
            st.error("Isso pode ocorrer devido a problemas de permiss√£o, formato de ROI ou limites de uso do GEE.")
            st.stop()


        st.markdown("---")

        # Concatenar com base nos √≠ndices se os dataframes tiverem o mesmo n√∫mero de linhas
        if len(pontos_df) == len(df_extracted):
            df_final = pd.concat([pontos_df.reset_index(drop=True), df_extracted.reset_index(drop=True)], axis=1)
            df_final.index = areas_list
            df_final = df_final.T
            st.markdown(
                "<h3> Aqui est√£o suas vari√°veis bioclim√°ticas! üòÄ </h3>",
                unsafe_allow_html=True,
            )
            st.dataframe(df_final) # Use st.dataframe para melhor visualiza√ß√£o

            st.markdown(
                "<h3> üëáüëáüëá clique para o download</h3>",
                unsafe_allow_html=True,
            )

            def convert_df(df_to_convert):
                return df_to_convert.to_csv(sep=";", decimal=",").encode("utf-8")

            csv = convert_df(df_final)

            st.download_button(
                "Download CSV...",
                csv,
                "bioclim_data.csv", # Nome de arquivo mais descritivo
                "text/csv",
                key="download-csv",
            )
        else:
            st.error(f"Inconsist√™ncia no n√∫mero de linhas entre coordenadas ({len(pontos_df)}) e valores extra√≠dos ({len(df_extracted)}). N√£o foi poss√≠vel combinar os dados.")
            st.write("Dados de coordenadas:", pontos_df)
            st.write("Dados extra√≠dos do EE:", df_extracted)


        st.markdown("---")
        st.markdown(
            "<h5>Detalhamento:</h5>",
            unsafe_allow_html=True,
        )
        st.markdown(
            "Para maiores informa√ß√µes, acessar o site do [worldclim](https://www.worldclim.org/)."
        )
        st.table(bioclim_df.set_index("Nome"))
        st.caption("Resolu√ß√£o da fonte WorldClim V1: ~1 km (30 arc-seconds)")


elif data and not areas_list:
    st.warning("Por favor, forne√ßa os nomes/identifica√ß√µes para as √°reas no passo 3.")
elif not data and areas_list:
    st.warning("Por favor, fa√ßa o upload do arquivo GeoJSON no passo 2.")


st.markdown("---")
st.subheader("Refer√™ncia")
referencia = "<p>Hijmans, R.J., S.E. Cameron, J.L. Parra, P.G. Jones and A. Jarvis, 2005. Very High Resolution Interpolated Climate Surfaces for Global Land Areas. International Journal of Climatology 25: 1965-1978. doi:10.1002/joc.1276.</p>"
st.markdown(referencia, unsafe_allow_html=True)